AWSTemplateFormatVersion: '2010-09-09'
Description: 'Builds Delivery Pipeline and componets to deploy a fargate ecs task.'
Parameters:
  ServiceName:
    Type: String
    Default: mcm-quest-service
  GitHubTokenName:
    Type: String
    Default: GITHUB_ACCESS_TOKEN
  GitHubRepositoryName:
    Type: String
    Default: quest
  GitHubOwner:
    Type: String
    Default: matthewcmorgan
  GitHubBranch:
    Type: String
    Default: mmorgan
  TaskCPU:
    Type: Number
    Default: 256
  TaskMemory:
    Type: Number
    Default: 512
  DesiredCount:
    Type: Number
    Default: 1
  MaxCapacity:
    Type: Number
    Default: 2
  MinCapacity:
    Type: Number
    Default: 1

Resources:
  Vpc:
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "./vpc.yml"
      
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-task-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: [sts:AssumeRole]
      Path: /
      Policies:
        - PolicyName: ecs-tasks-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForResource
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-execution-role
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: [sts:AssumeRole]
      Policies:
        - PolicyName: ecs-task-execution-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: [ecr:GetAuthorizationToken]
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ServiceName
      Memory: !Ref TaskMemory
      Cpu: !Ref TaskCPU
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ServiceName}
          PortMappings:
            - ContainerPort: 443
              Protocol: tcp

  ECSAutoScaling:
    DependsOn:
      - Service
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxCapacity
      MinCapacity: !Ref MinCapacity
      ResourceId: !Sub service/${ServiceName}/${ServiceName}
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ECSAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: cpu-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSAutoScaling
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 75
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-asg-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [autoscaling.amazonaws.com]
            Action: [sts:AssumeRole]
      Policies:
        - PolicyName: ecs-autoscaling-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: [cloudwatch:DescribeAlarms, cloudwatch:GetMetricStatistics, cloudwatch:PutMetricAlarm]
                Resource: '*'

  AutoScalingCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmDescription: Container CPU Utilization High
      Statistic: Average
      Threshold: 75
      Period: 300
      AlarmActions:
        - !Ref ECSAutoScalingPolicy
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !GetAtt Service.Name
        - Name: ClusterName
          Value: !Ref Cluster
      MetricName: CPUUtilization

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref ServiceName
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ServiceName}
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      TimeoutInMinutes: 15

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
        Version: '2012-10-17'
      ManagedPolicyArns:
        # More than necessary
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS
      VpcId: !GetAtt Vpc.Outputs.VpcId
      SecurityGroupEgress:
        - IpProtocol: "-1"
          Description: Allow outbound traffic
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: Allow ingress on 443 from Alb
          SourceSecurityGroupId: !Ref AlbSecurityGroup

  Repository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    Properties:
      RepositoryName: !Ref ServiceName
      LifecyclePolicy:
        LifecyclePolicyText: '{"rules": [{"rulePriority": 1, "description": "keep last 5 images", "selection": { "tagStatus": "any", "countType": "imageCountMoreThan", "countNumber": 5}, "action": { "type": "expire"}}]}'

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ServiceName

  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [!Ref ECSSecurityGroup]
          Subnets: 
            - !GetAtt Vpc.Outputs.PrivateSubnetA
            - !GetAtt Vpc.Outputs.PrivateSubnetB
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          TargetGroupArn: !Ref ALBTargetGroup

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !GetAtt Vpc.Outputs.VpcId
      GroupDescription: !Sub ${ServiceName} SG for ALB
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow outbound TCP Traffic to anywhere
          IpProtocol: "-1"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: Allow inbound TCP traffic on 80
          CidrIp: 0.0.0.0/0

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref ServiceName
      Scheme: internal
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Subnets:
        - !GetAtt Vpc.Outputs.PublicSubnetA
        - !GetAtt Vpc.Outputs.PublicSubnetB

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref ServiceName
      Protocol: HTTPS
      Port: 443
      VpcId: !GetAtt Vpc.Outputs.VpcId
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /healthcheck
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      UnhealthyThresholdCount: 3

# Must be updated to valid Github ACCESS TOKEN after creation
  GithubToken:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref GitHubTokenName
      GenerateSecretString:
        SecretStringTemplate: '{"username":"ghtoken"}'
        GenerateStringKey: password
        PasswordLength: 32
      Tags:
        - Key: Name
          Value: !Ref GitHubTokenName

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-codepipeline-service-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
              AWS:
                - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CodePipelineServiceRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${CodePipelineS3Bucket}/*
                  - !Sub arn:${AWS::Partition}:s3:::${CodePipelineS3Bucket}
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub arn:${AWS::Partition}:s3:::${CodePipelineS3Bucket}/*

  CodePipelineS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-codepipeline-source-artifacts

  CodePipelineS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CodePipelineS3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Principal: '*'
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${CodePipelineS3Bucket}/*'
          - Action:
              - s3:PutObject
              - s3:GetBucketVersioning
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${CodePipelineServiceRole}
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${CodePipelineS3Bucket}/*'
              - !Sub arn:${AWS::Partition}:s3:::${CodePipelineS3Bucket}

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Location: !Ref CodePipelineS3Bucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepositoryName
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubTokenName
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                StackName: !Sub ${AWS::StackName}-Service
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                TemplatePath: BuildOutput::Service.yaml
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

  ServiceLogs:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub ${ServiceName}
      RetentionInDays: 7

Outputs:
  ServiceEndpoint:
    Value: !Sub ${AWS::StackName}-service-endpoint
  LogGroup:
    Value: !Ref ServiceLogs
  
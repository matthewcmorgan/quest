AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  PrivateSubnetA:
    Description: Subnet ID used for Service, resolved via SSM
    Type: String
  PrivateSubnetB:
    Description: Subnet ID used for Service, resolved via SSM
    Type: String
  LogGroup:
    Description: Log group for service logging
    Type: String
  ECSSecurityGroup:
    Description: Security group to apply to containers
    Type: String
  AutoscalingMin:
    Description: Minimum size of the AutoScaling Group
    Type: String
    Default: 1
  AutoscalingMax:
    Description: Maximum size of the AutoScaling Group
    Type: String
    Default: 3
  AutoScalingRoleArn:
    Description: ARN for Autoscaling Role in ECS
    Type: String
  TaskRoleArn:
    Description: ARN for role to create tasks in ECS
    Type: String
  ExecutionRoleArn:
    Description: ARN for role to execute tasks in ECS
    Type: String
  Image:
    Description: The container to run tasks in
    Type: String
  Tag:
    Description: Used as the aws log stream prefix
    Type: String
  ClusterName:
    Description: Cluster used to create and execute tasks
    Type: String

Resources:
  EcsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ClusterName
      DesiredCount: 1
      PropagateTags: SERVICE
      DeploymentController:
        Type: ECS
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: false
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Sub "${PrivateSubnetA}"
            - !Sub "${PrivateSubnetB}"

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      TaskRoleArn: !Ref TaskRoleArn
      ExecutionRoleArn: !Ref ExecutionRoleArn
      Family: !Sub ${AWS::StackName}
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '1024'
      Memory: '2048'
      ContainerDefinitions:
        - Name: !Sub ${AWS::StackName}
          Image: !Ref Image
          Essential: true
          Cpu: 1024
          Memory: 2048
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Sub "${AWS::Region}"
              awslogs-stream-prefix: !Ref Tag

  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      RoleARN: !Ref AutoScalingRoleArn
      MinCapacity: !Ref AutoscalingMin
      MaxCapacity: !Ref AutoscalingMax
      ResourceId: !Sub service/${ClusterName}/${EcsService.Name}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: AStepPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 2
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  AutoScalingCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Containers CPU Utilization High
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 80
      Period: 300
      AlarmActions:
        - !Ref ServiceScalingPolicy
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !GetAtt EcsService.Name
        - Name: ClusterName
          Value: !Ref ClusterName
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: CPUUtilization

Outputs:
  EcsCluster:
    Value: !Ref ClusterName

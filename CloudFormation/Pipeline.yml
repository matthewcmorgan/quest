AWSTemplateFormatVersion: '2010-09-09'
Description: Builds Roles for Stack
Parameters:
  GitHubToken:
    Description: Personal Access Token for authenticating to GitHub
    Type: String
    NoEcho: true
  GitHubRepositoryName:
    Type: String
    Default: quest
  GitHubOwner:
    Type: String
    Default: matthewcmorgan
  GitHubBranch:
    Type: String
    Default: mmorgan
  VpcId: 
    Type: String
  PrivateSubnetA:
    Type: String
  PrivateSubnetB:
    Type: String
  ExecutionRoleArn:
    Type: String
  TaskRoleArn:
    Type: String
  AutoScalingRoleArn:
    Type: String
  ServiceName:
    Type: String
  ClusterName:
    Type: String
  ECSSecurityGroup:
    Type: String
  ServiceLogs:
    Type: String

Resources:
  CodeBuildSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Egress traffic for codebuild
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
          Description: Allow egress of anytype to anywhere
      VpcId: !Sub "${VpcId}"

# Must be updated after creation to correct value (or passed on the cli as a parameter-override)
  GitHubTokenSecret:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: PAT for Github Access
      Name: github-token-secret
      SecretString: !Sub '{"token":"${GitHubToken}"}'

  GitHubWebhook:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Join [':', ['{{resolve:secretsmanager', !Ref GitHubTokenSecret, 'SecretString:token}}']]
      RegisterWithThirdParty: true
      Filters:
      - JsonPath: "$.ref"
        MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref CodePipeline
      TargetAction: Source
      TargetPipelineVersion: !GetAtt CodePipeline.Version

  CodeBuildProject:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref ServiceName
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ServiceName}
        PrivilegedMode: true
      VpcConfig:
        SecurityGroupIds:
          - !Ref CodeBuildSecurityGroup
        Subnets:
          - !Sub "${PrivateSubnetA}"
          - !Sub "${PrivateSubnetB}"
        VpcId: !Sub "${VpcId}"
      Source:
        BuildSpec: CloudFormation/buildspec.yml
        Type: CODEPIPELINE
      TimeoutInMinutes: 15

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
              AWS: !GetAtt CodePipelineServiceRole.Arn
            Action: sts:AssumeRole
        Version: '2012-10-17'
      ManagedPolicyArns:
        # More than necessary
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess
      Policies:
        - PolicyName: CodeBuildServiceRole 
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
            - Sid: CloudWatchLogsPolicy
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
            - Sid: S3GetObjectPolicy
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectVersion
              Resource: "*"
            - Sid: S3PutObjectPolicy
              Effect: Allow
              Action:
                - s3:PutObject
              Resource: "*"
            - Sid: S3BucketIdentity
              Effect: Allow
              Action:
                - s3:GetBucketAcl
                - s3:GetBucketLocation
              Resource: "*"

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-pipeline-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
                - cloudformation.amazonaws.com
              AWS:
                - !Sub ${AWS::AccountId}
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CodePipelineServiceRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${CodePipelineS3Bucket}/*
                  - !Sub arn:${AWS::Partition}:s3:::${CodePipelineS3Bucket}
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub arn:${AWS::Partition}:s3:::${CodePipelineS3Bucket}/*
              - Effect: Allow
                Action:
                  - codebuild:*
                  - cloudformation:*
                  - codepipeline:*
                  - iam:PassRole
                Resource: '*'

  CodePipelineS3Bucket:
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ServiceName}-artifacts
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref PipelineKey
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: ExpirationRule
            Status: Enabled
            ExpirationInDays: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True

  CodePipelineS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CodePipelineS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Id: SSEAndSSLPolicy
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub ${AWS::AccountId}
            Action:
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:GetObjectVersion
              - s3:GetObjectVersionAcl
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:PutObjectVersionAcl
            Resource: !Sub arn:${AWS::Partition}:s3:::${CodePipelineS3Bucket}/*
          - Effect: Allow
            Principal:
              AWS:
                - !Sub ${AWS::AccountId}
            Action:
              - s3:ListBucket
            Resource: !Sub arn:${AWS::Partition}:s3:::${CodePipelineS3Bucket}

  SigningKey:
    Type: AWS::KMS::Key
    Properties:
      Enabled: true
      Description: Key for signing images with cosign
      KeyUsage: SIGN_VERIFY
      KeySpec: ECC_NIST_P521
      MultiRegion: false
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS:
            - !Sub ${AWS::AccountId}
          Action:
            - kms:*
          Resource: '*'
        - Effect: Deny
          Principal: '*'
          Action:
            - kms:DescribeKey
            - kms:GetPublicKey
            - kms:Sign
            - kms:Verify
          Resource: '*'
          Condition:
            Bool:
              kms:GrantIsForAWSResource: false

  SigningAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}-key
      TargetKeyId: !Ref SigningKey

  PipelineKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Used to encrypt and decrypt pipeline data.
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub ${AWS::AccountId}
            Action:
              - kms:*
            Resource: '*'
          - Effect: Deny
            Principal: '*'
            Action:
              - kms:CreateGrant
              - kms:ListGrants
              - kms:RevokeGrant
            Resource: '*'
            Condition:
              Bool:
                kms:GrantIsForAWSResource: false

  PipelineKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}
      TargetKeyId: !Ref PipelineKey

  CodePipeline:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Location: !Ref CodePipelineS3Bucket
        Type: S3
      RestartExecutionOnUpdate: true
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepositoryName
                Branch: !Ref GitHubBranch
                OAuthToken: !Join [':', ['{{resolve:secretsmanager', !Ref GitHubTokenSecret, 'SecretString:token}}']]
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
                EnvironmentVariables: !Sub |
                  [
                    {"name": "COSIGN_KEY_ARN", "value": "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:alias/${AWS::StackName}-key"}
                  ]
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildOutput
              RoleArn: !GetAtt CodeBuildRole.Arn
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                StackName: !Sub ${AWS::StackName}-Service
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                TemplatePath: BuildOutput::CloudFormation/Service.yml
                RoleArn: !GetAtt CodePipelineServiceRole.Arn
                ParameterOverrides: !Sub |
                  {
                    "PrivateSubnetA": "${PrivateSubnetA}",
                    "PrivateSubnetB": "${PrivateSubnetB}",
                    "ExecutionRoleArn": "${ExecutionRoleArn}",
                    "TaskRoleArn": "${TaskRoleArn}",
                    "AutoScalingRoleArn": "${AutoScalingRoleArn}",
                    "ClusterName": "${ClusterName}",
                    "ECSSecurityGroup": "${ECSSecurityGroup}",
                    "LogGroup": "${ServiceLogs}",
                    "Image": { "Fn::GetParam" : ["BuildOutput", "imageDetail.json", "ImageURI"]},
                    "Tag": { "Fn::GetParam" : ["BuildOutput", "imageDetail.json", "Tag"]}
                  }
              InputArtifacts:
                - Name: BuildOutput
              RoleArn: !GetAtt CodePipelineServiceRole.Arn
              RunOrder: 1

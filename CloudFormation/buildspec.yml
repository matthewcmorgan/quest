version: 0.2
phases:
  install:
    runtime-versions:
      nodejs: '16'
  pre_build:
    commands:
      # Login to ECR
      - |
        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}

      # Install checkov
      - pip install --upgrade pip checkov --quiet

      # Install Trivy
      - TRIVY_VERSION=$(curl -fsSL "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | jq -r '.tag_name' | cut -c2-)
      - rpm -ivh https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.rpm

      # Install Cosign
      - COSIGN_VERSION=$(curl -fsSL "https://api.github.com/repos/sigstore/cosign/releases/latest" | jq -r '.tag_name' | cut -c2-)
      - rpm -ivh https://github.com/sigstore/cosign/releases/download/v${COSIGN_VERSION}/cosign-${COSIGN_VERSION}.x86_64.rpm

  build:
    commands:
      - echo Build started on `date`
      - IMAGE_REPO_NAME=quest-app
      - IMAGE_TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
      - IMAGE_URI=$IMAGE_REPO_NAME:$IMAGE_TAG
      # Run Chekov against image
      - checkov --file Dockerfile --output junitxml --output cli --output-file-path results.xml,console
      # Build Image
      - docker build --no-cache --pull -f Dockerfile -t ${IMAGE_URI} .
      - docker tag $IMAGE_URI $REPOSITORY_URI:$IMAGE_TAG
      # Trivy Scan  image
      - trivy image ${IMAGE_URI} --format cosign-vuln --output trivy.output
      - docker push ${REPOSITORY_URI}:${IMAGE_TAG}
      - IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${IMAGE_URI})
      # Generate a keypair for signing and verify
      - cosign generate-key-pair --kms awskms:///${COSIGN_KEY_ARN}
      # Sign image
      - cosign sign --tlog-upload --key awskms:///${COSIGN_KEY_ARN} ${IMAGE_DIGEST}
      # Verify signature and claims with cosign
      - cosign verify --key awskms:///${COSIGN_KEY_ARN} ${IMAGE_DIGEST}

      # Push signed Image to ECR
      - docker push ${REPOSITORY_URI}:${IMAGE_DIGEST}
      - printf '{"ImageURI":"%s", "Tag":"%s"}' "$REPOSITORY_URI:$IMAGE_TAG" "$IMAGE_TAG" | tee imageDetail.json

reports:
  checkovScan:
    files:
      - results.xml
    file-format: junitxml

artifacts:
  files:
    - imageDetail.json
    - Service.yml
    - '**/*'
AWSTemplateFormatVersion: '2010-09-09'
Description: Builds vpc and supporting infra.
Parameters:
  ServiceName:
    Type: String
  Vpc:
    Type: String
  PublicSubnet1:
    Type: String
  PublicSubnet2:
    Type: String

Resources:
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS
      VpcId: !Ref Vpc
      SecurityGroupEgress:
        - IpProtocol: "-1"
          Description: Allow outbound traffic
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: Allow ingress on 443 from Alb
          SourceSecurityGroupId: !Ref AlbSecurityGroup

  Repository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    Properties:
      RepositoryName: !Ref ServiceName
      LifecyclePolicy:
        LifecyclePolicyText: '{"rules": [{"rulePriority": 1, "description": "keep last 5 images", "selection": { "tagStatus": "any", "countType": "imageCountMoreThan", "countNumber": 5}, "action": { "type": "expire"}}]}'

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ServiceName

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: !Sub ${ServiceName} SG for ALB
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow outbound TCP Traffic to anywhere
          IpProtocol: "-1"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: Allow inbound TCP traffic on 443
          CidrIp: 0.0.0.0/0

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckPort: '443'
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"
      Port: 443
      Protocol: HTTPS
      TargetType: ip
      UnhealthyThresholdCount: 4
      VpcId: !Sub "${Vpc}"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '10'

Outputs:
  TargetGroup:
    Value: !Ref TargetGroup
  AlbSecurityGroup:
    Value: !Ref AlbSecurityGroup
  ClusterName:
    Value: !Ref Cluster
  ECSSecurityGroup:
    Value: !Ref ECSSecurityGroup
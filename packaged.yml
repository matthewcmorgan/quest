AWSTemplateFormatVersion: '2010-09-09'
Description: Builds Delivery Pipeline and componets to deploy a fargate ecs task.
Parameters:
  ServiceName:
    Type: String
    Default: mcmQuest
  GitHubTokenName:
    Type: String
    Default: GITHUB_ACCESS_TOKEN
  GitHubRepositoryName:
    Type: String
    Default: quest
  GitHubOwner:
    Type: String
    Default: matthewcmorgan
  GitHubBranch:
    Type: String
    Default: mmorgan
  TaskCPU:
    Type: Number
    Default: 256
  TaskMemory:
    Type: Number
    Default: 512
  DesiredCount:
    Type: Number
    Default: 1
  MaxCapacity:
    Type: Number
    Default: 2
  MinCapacity:
    Type: Number
    Default: 1
  VpcId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>
  SubnetA:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Subnet::Id>
  SubnetB:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Subnet::Id>
Resources:
  Vpc:
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.us-west-2.amazonaws.com/matthew.morgan.bucket/5d82e9956bfda98534002ba1ccec350a.template
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-task-role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: ecs-tasks-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ecr:GetAuthorizationToken
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForResource
            - ecr:BatchGetImage
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-execution-role
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: ecs-task-execution-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ecr:GetAuthorizationToken
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Ref: ServiceName
      Memory:
        Ref: TaskMemory
      Cpu:
        Ref: TaskCPU
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      ExecutionRoleArn:
        Fn::GetAtt:
        - ExecutionRole
        - Arn
      TaskRoleArn:
        Fn::GetAtt:
        - TaskRole
        - Arn
      ContainerDefinitions:
      - Name:
          Ref: ServiceName
        Image:
          Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ServiceName}
        PortMappings:
        - ContainerPort: 80
          Protocol: tcp
  ECSAutoScaling:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity:
        Ref: MaxCapacity
      MinCapacity:
        Ref: MinCapacity
      ResourceId:
        Fn::Sub: service/${ServiceName}/${ServiceName}
      RoleARN:
        Fn::GetAtt:
        - AutoScalingRole
        - Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  ECSAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: cpu-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: ECSAutoScaling
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 75
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-asg-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - autoscaling.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: ecs-autoscaling-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:DescribeAlarms
            - cloudwatch:GetMetricStatistics
            - cloudwatch:PutMetricAlarm
            Resource: '*'
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name:
        Ref: ServiceName
      ServiceRole:
        Fn::GetAtt:
        - CodeBuildRole
        - Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
        - Name: AWS_DEFAULT_REGION
          Value:
            Ref: AWS::Region
        - Name: AWS_ACCOUNT_ID
          Value:
            Ref: AWS::AccountId
        - Name: REPOSITORY_URI
          Value:
            Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ServiceName}
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      TimeoutInMinutes: 15
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS
      VpcId:
        Ref: VpcId
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Ref: ServiceName
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName:
        Ref: ServiceName
      Cluster:
        Ref: Cluster
      TaskDefinition:
        Ref: TaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount:
        Ref: DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: ECSSecurityGroup
          Subnets:
          - Ref: SubnetA
          - Ref: SubnetB
      LoadBalancers:
      - ContainerName:
          Ref: ServiceName
        TargetGroupArn:
          Ref: ALBTargetGroup
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:
        Ref: ServiceName
      Protocol: HTTP
      Port: 80
      VpcId:
        Ref: VpcId
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /healthcheck
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      UnhealthyThresholdCount: 3
  GithubToken:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Ref: GitHubTokenName
      GenerateSecretString:
        SecretStringTemplate: '{"username":"ghtoken"}'
        GenerateStringKey: password
        PasswordLength: 32
      Tags:
      - Key: Name
        Value:
          Ref: GitHubTokenName
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-codepipeline-service-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
            AWS:
            - Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:root
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: CodePipelineServiceRolePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:s3:::${CodePipelineS3Bucket}/*
            - Fn::Sub: arn:${AWS::Partition}:s3:::${CodePipelineS3Bucket}
          - Effect: Allow
            Action:
            - s3:PutObject
            Resource:
              Fn::Sub: arn:${AWS::Partition}:s3:::${CodePipelineS3Bucket}/*
  CodePipelineS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-codepipeline-source-artifacts
  CodePipelineS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: CodePipelineS3Bucket
      PolicyDocument:
        Statement:
        - Action:
          - s3:GetObject
          Effect: Allow
          Principal: '*'
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${CodePipelineS3Bucket}/*
        - Action:
          - s3:PutObject
          - s3:GetBucketVersioning
          Effect: Allow
          Principal:
            AWS:
            - Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${CodePipelineServiceRole}
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${CodePipelineS3Bucket}/*
          - Fn::Sub: arn:${AWS::Partition}:s3:::${CodePipelineS3Bucket}
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn:
        Fn::GetAtt:
        - CodePipelineServiceRole
        - Arn
      ArtifactStore:
        Location:
          Ref: CodePipelineS3Bucket
        Type: S3
      Stages:
      - Name: Source
        Actions:
        - Name: SourceAction
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Version: '1'
            Provider: GitHub
          Configuration:
            Owner:
              Ref: GitHubOwner
            Repo:
              Ref: GitHubRepositoryName
            Branch:
              Ref: GitHubBranch
            OAuthToken:
              Ref: GitHubTokenName
            PollForSourceChanges: false
          OutputArtifacts:
          - Name: SourceArtifact
          RunOrder: 1
      - Name: Build
        Actions:
        - Name: BuildAction
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: '1'
            Provider: CodeBuild
          Configuration:
            ProjectName:
              Ref: CodeBuildProject
          InputArtifacts:
          - Name: SourceArtifact
          OutputArtifacts:
          - Name: BuildOutput
          RunOrder: 1
      - Name: Deploy
        Actions:
        - Name: DeployAction
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: '1'
            Provider: CloudFormation
          Configuration:
            StackName:
              Fn::Sub: ${AWS::StackName}-Service
            ActionMode: CREATE_UPDATE
            Capabilities: CAPABILITY_IAM
            TemplatePath: BuildOutput::Service.yaml
          InputArtifacts:
          - Name: BuildOutput
          RunOrder: 1
Outputs:
  ServiceEndpoint:
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - Service
          - LoadBalancers
          - 0
          - DNSName
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-service-endpoint
